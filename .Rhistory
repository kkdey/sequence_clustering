install.packages("D:/Grad School/GitHub/ash/package/ashr.tar.gz",repos=NULL,type="source")
install.packages("D:/Grad School/GitHub/ash/package/ashr.tar.gz",repos=NULL,type="source")
install.packages("D:/Grad School/GitHub/multiseq/package/multiseq.tar.gz",repos=NULL,type="source")
install.packages("D:/Grad School/GitHub/multiseq/package/multiseq_0.1.tar.gz",repos=NULL,type="source")
install.packages("D:/Grad School/GitHub/ash/package/ashr.tar.gz",repos=NULL,type="source")
install.packages("D:/Grad School/GitHub/ash/package/ashr.tar",repos=NULL,type="source")
install.packages("D:/Grad School/GitHub/multiseq/package/multiseq_0.1.tar.gz",repos=NULL,type="source")
?legend
?sample
mu.null=rep(0.5,n)
ms.alt=ms.null
ms.alt[500:600]=1
N=100
n=2^10
nobs=40
g=rep(0:1,each=nobs/2)
mu.null=rep(0.5,n)
ms.alt=ms.null
ms.alt[500:600]=1
sim.data=matrix(rpois(nobs*n,nobs*mu.null),nrow=nobs,byrow=TRUE)
sim.data=matrix(rpois(nobs*n,nobs/2*mu.null,nobs/2*mu.alt),nrow=nobs,byrow=TRUE)
sim.data=matrix(rpois(nobs*n,rep(mu.null,nobs),rep(mu.alt,obs)),nrow=nobs,byrow=TRUE)
sim.data=matrix(rpois(nobs*n,c(rep(mu.null,nobs),rep(mu.alt,obs))),nrow=nobs,byrow=TRUE)
mu.null=rep(0.5,n)
mu.alt=mu.null
mu.alt[500:600]=1
sim.data=matrix(rpois(nobs*n,c(rep(mu.null,nobs),rep(mu.alt,obs))),nrow=nobs,byrow=TRUE)
sim.data=matrix(rpois(nobs*n,c(rep(mu.null,nobs),rep(mu.alt,nobs))),nrow=nobs,byrow=TRUE)
plot(sim.data[1,])
rep(mu.null,nobs)
plot(sim.data[21,])
c(rep(mu.null,nobs),rep(mu.alt,nobs))[21,]
matrix(c(rep(mu.null,nobs),rep(mu.alt,nobs)),nrow=40,byrow=TRUE)[21,]
sim.data=matrix(rpois(nobs*n,c(rep(mu.null,nobs/2),rep(mu.alt,nobs/2))),nrow=nobs,byrow=TRUE)
sim.data[21,]
plot(sim.data[21,])
write(sim.data,"test.txt")
getwd()
getwd()
write(sim.data,"test.txt",nrow=nobs)
write(sim.data,"test.txt",ncol=n)
?write
write(sim.data,"test.txt",ncolumns=n)
sim.data
write(sim.data,"test.txt")
write(sim.data,"test.txt",ncolumns=40)
head(sim.data)
write(t(sim.data),"test.txt",ncolumns=n)
write(t(sim.data),"test.txt",ncolumns=n)
n
write(t(sim.data),"test.txt",ncolumns=n)
write((sim.data),"test.txt",ncolumns=n)
cat((sim.data),"test.txt")
cat((sim.data),file="test.txt")
write((sim.data),"test.txt",ncolumns=n)
sim,data[,1]
sim.data[1,]
write(t(sim.data),"test.txt",ncolumns=n)
sim.data[,2]
sim.data[2,]
read(test.txt)
read.table("test.txt"")
read.table("test.txt")
read.table("test.txt",header=FALSE)
tt=read.table("test.txt",header=FALSE)
dim(tt)
tt[1,]
tt[2,]
tt=read.table("test.txt",header=FALSE,row.names=FALSE,col.names=FALSE)
?read.table
tt=read.table("test.txt",header=FALSE,row.names=NULL,col.names=NULL)
tt=read.table("test.txt",header=FALSE,row.names=NULL)
tt
tt=read.table("test.txt",header=FALSE,row.names=NULL,col.names=rep(NULL,1024))
tt=read.table("test.txt",header=FALSE,row.names=NULL,col.names=NULL
)
tt=as.matrix(read.table("test.txt",header=FALSE,row.names=NULL,col.names=NULL))
tt=as.matrix(read.table("test.txt",header=FALSE))
tt
tt[col.names=NULL]
col.names(tt)=NULL
names(tt)=NULL
tt
colnames(tt)=NULL
tt
tt=read.table("test.txt",header=FALSE)
tt
tt[1,]
tt[1,]-1
is.numeric(tt[1,])
is.numeric(tt)
is.matrix(tt)
tt=as.matrix(read.table("test.txt",header=FALSE))
is.numeric(tt)
is.matrix(tt)
library(ash)
library(ashr)
ash
ash.workhorse
library(smash)
ashsmooth.gaus
colSums
library(smash)
?ashsmooth.gaus
n=2^10
t=1:n/n
spike.f=function(x) (0.75*exp(-500*(x-0.23)^2)+1.5*exp(-2000*(x-0.33)^2)+3*exp(-8000*(x-0.47)^2)+2.25*exp(-16000*(x-0.69)^2)+0.5*exp(-32000*(x-0.83)^2))
mu.s=spike.f(t)
#Gaussian case
mu.t=(1+mu.s)/5
plot(mu.t,type="l")
var.fn=(0.0001+4*(exp(-550*(t-0.2)^2)+exp(-200*(t-0.5)^2)+exp(-950*(t-0.8)^2)))/1.35
plot(var.fn,type="l")
rsnr=sqrt(5)
sigma.t=sqrt(var.fn)/mean(sqrt(var.fn))*sd(mu.t)/rsnr^2
X.s=rnorm(n,mu.t,sigma.t)
mu.est<-ashsmooth.gaus(X.s)
plot(mu.t,type="l")
lines(mu.est,col=2)
mean((mu.est-mu.t)^2)
n=2^10
t=1:n/n
spike.f=function(x) (0.75*exp(-500*(x-0.23)^2)+1.5*exp(-2000*(x-0.33)^2)+3*exp(-8000*(x-0.47)^2)+2.25*exp(-16000*(x-0.69)^2)+0.5*exp(-32000*(x-0.83)^2))
mu.s=spike.f(t)
#Gaussian case
mu.t=(1+mu.s)/5
plot(mu.t,type="l")
var.fn=(0.0001+4*(exp(-550*(t-0.2)^2)+exp(-200*(t-0.5)^2)+exp(-950*(t-0.8)^2)))/1.35
plot(var.fn,type="l")
rsnr=sqrt(5)
sigma.t=sqrt(var.fn)/mean(sqrt(var.fn))*sd(mu.t)/rsnr^2
set.seed(422)
X.s=rnorm(n,mu.t,sigma.t)
mu.est<-ashsmooth.gaus(X.s)
plot(mu.t,type="l")
lines(mu.est,col=2)
mean((mu.est-mu.t)^2)
library(ebayesthresh)
library(EBayesThresh)
library(EbayesThresh)
?ebayesthresh.wavelet
spike.f=function(x) (0.75*exp(-500*(x-0.23)^2)+1.5*exp(-2000*(x-0.33)^2)+3*exp(-8000*(x-0.47)^2)+2.25*exp(-16000*(x-0.69)^2)+0.5*exp(-32000*(x-0.83)^2))
n=2^10
t=1:n/n
mu.s=spike.f(t)
pos = c(.1, .13, .15, .23, .25, .40, .44, .65, .76, .78, .81)
hgt = 2.97/5*c(4, 5, 3, 4, 5, 4.2, 2.1, 4.3, 3.1, 5.1, 4.2)
wth = c(.005, .005, .006, .01, .01, .03, .01, .01, .005, .008, .005)
mu.b = rep(0,n)
for(j in 1:length(pos)){
mu.b = mu.b + hgt[j]/(( 1 + (abs(t - pos[j])/wth[j]))^4)
}
dop.f=function(x) sqrt(x*(1-x))*sin((2*pi*1.05)/(x+0.05))
mu.dop=dop.f(t)
mu.dop=3/(max(mu.dop)-min(mu.dop))*(mu.dop-min(mu.dop))
sig=((2*t + 0.5)*(t <= 0.15)) +
((-12*(t-0.15) + 0.8)*(t > 0.15 & t <= 0.2)) +
0.2*(t > 0.2 & t <= 0.5) +
((6*(t - 0.5) + 0.2)*(t > 0.5 & t <= 0.6)) +
((-10*(t - 0.6) + 0.8)*(t > 0.6 & t <= 0.65)) +
((-0.5*(t - 0.65) + 0.3)*(t > 0.65 & t <= 0.85)) +
((2*(t - 0.85) + 0.2)*(t > 0.85))
mu.ang = 3/5*((5/(max(sig)-min(sig)))*sig - 1.6)-0.0419569
heavi = 4 * sin(4 * pi * t) - sign(t - 0.3) - sign(0.72 - t)
mu.hs = heavi/sqrt(var(heavi)) * 1 * 2.99 / 3.366185
mu.hs = mu.hs - min(mu.hs)
pos=c(.1, .13, .15, .23, .25, .40, .44, .65, .76, .78, .81)
hgt = 2.88/5*c(4, (-5), 3, (-4), 5, (-4.2), 2.1, 4.3, (-3.1), 2.1, (-4.2))
mu.blk = rep(0,n)
for(j in 1:length(pos)){
mu.blk = mu.blk + (1 + sign(t-pos[j]))*(hgt[j]/2)
}
mu.cblk=mu.blk
mu.cblk[mu.cblk<0]=0
mu.cor=623.87*t^3*(1-2*t)*(t>=0&t<=0.5)+187.161*(0.125-t^3)*t^4*(t>0.5&t<=0.8)+3708.470441*(t-1)^3*(t>0.8&t<=1)
mu.cor=(0.6/(max(mu.cor)-min(mu.cor)))*mu.cor
mu.cor=mu.cor-min(mu.cor)+0.2
mse=function(x,y) mean((x-y)^2)
l2norm=function(x) sum(x^2)
mise=function(x,y) 10000*mean(apply(x-rep(1,100)%o%y,1,l2norm)/l2norm(y))
waveti.ebayes.old=function (x, filter.number = 10, family = "DaubLeAsymm", min.level = 3, noise.level){
n=length(x)
J=log2(n)
x.w <- wd(x, filter.number, family, type = "station")
for(j in min.level:(J-1)){
x.pm = ebayesthresh(accessD(x.w,j),sdev=noise.level)
x.w = putD(x.w,j,x.pm)
}
mu.est=AvBasis(convert(x.w))
return(mu.est)
}
waveti.ebayes=function (x, filter.number = 10, family = "DaubLeAsymm", min.level = 3, noise.level){
n=length(x)
J=log2(n)
x.w <- wd(x, filter.number, family, type = "station")
x.w <- ebayesthresh.wavelet(x.w, vscale = noise.level, a = NA, threshrule = "mean")
mu.est=AvBasis(convert(x.w))
return(mu.est)
}
mu.t=(1+mu.s)/5
#mu.t=(1+mu.b)/5
#mu.t=(1+mu.blk)/5
#mu.t=(1+mu.ang)/5
#mu.t=(1+mu.dop)/5
#mu.t=mu.blip
#mu.t=mu.cor
rsnr=sqrt(1)
var1=rep(1,n)
var2=(0.0001+4*(exp(-550*(t-0.2)^2)+exp(-200*(t-0.5)^2)+exp(-950*(t-0.8)^2)))/1.35
var4=3.4*(2+mu.dop)
var5=0.00001+1*(mu.cblk-min(mu.cblk))/max(mu.cblk)
sigma.ini=sqrt(var2)
sigma.t=sigma.ini/mean(sigma.ini)*sd(mu.t)/rsnr^2
#sigma.t=sd(mu.t)/rsnr^2
set.seed(327)
X.s=rnorm(n,mu.t,sigma.t)
set.seed(1107)
X.s=matrix(rnorm(100*n,mu.t,sigma.t),nrow=100,byrow=TRUE)
set.seed(327)
X.s=rnorm(n,mu.t,sigma.t)
set.seed(327)
X.s=rnorm(n,mu.t,sigma.t)
mu.t=(1+mu.s)/5
#mu.t=(1+mu.b)/5
#mu.t=(1+mu.blk)/5
#mu.t=(1+mu.ang)/5
#mu.t=(1+mu.dop)/5
#mu.t=mu.blip
#mu.t=mu.cor
rsnr=sqrt(1)
var1=rep(1,n)
var2=(0.0001+4*(exp(-550*(t-0.2)^2)+exp(-200*(t-0.5)^2)+exp(-950*(t-0.8)^2)))/1.35
var4=3.4*(2+mu.dop)
var5=0.00001+1*(mu.cblk-min(mu.cblk))/max(mu.cblk)
sigma.ini=sqrt(var1)
sigma.t=sigma.ini/mean(sigma.ini)*sd(mu.t)/rsnr^2
#sigma.t=sd(mu.t)/rsnr^2
set.seed(327)
X.s=rnorm(n,mu.t,sigma.t)
sigma.t
tt1=waveti.ebayes.old(X.s,filter.number=8,noise.level=sigma.t)
tt1=waveti.ebayes.old(X.s,filter.number=8,noise.level=sigma.t[1])
tt2=waveti.ebayes(X.s,filter.number=8,noise.level=sigma.t[1])
mse(tt1,mu.t)
mse(tt2,mu.t)
waveti.ebayes=function (x, filter.number = 10, family = "DaubLeAsymm", min.level = 3, noise.level){
n=length(x)
J=log2(n)
x.w <- wd(x, filter.number, family, type = "station")
x.w <- ebayesthresh.wavelet(x.w, vscale = noise.level, smooth.levels = J - min.level + 1, a = NA, threshrule = "mean")
mu.est=AvBasis(convert(x.w))
return(mu.est)
}
tt2=waveti.ebayes(X.s,filter.number=8,noise.level=sigma.t[1])
mse(tt1,mu.t)
mse(tt2,mu.t)
waveti.ebayes=function (x, filter.number = 10, family = "DaubLeAsymm", min.level = 3, noise.level){
n=length(x)
J=log2(n)
x.w <- wd(x, filter.number, family, type = "station")
x.w <- ebayesthresh.wavelet(x.w, vscale = noise.level, smooth.levels = J - min.level + 1)
mu.est=AvBasis(convert(x.w))
return(mu.est)
}
tt1=waveti.ebayes.old(X.s,filter.number=8,noise.level=sigma.t[1])
tt2=waveti.ebayes(X.s,filter.number=8,noise.level=sigma.t[1])
mse(tt1,mu.t)
mse(tt2,mu.t)
waveti.ebayes=function (x, filter.number = 10, family = "DaubLeAsymm", min.level = 3, noise.level){
n=length(x)
J=log2(n)
x.w <- wd(x, filter.number, family, type = "station")
x.w <- ebayesthresh.wavelet(x.w, vscale = noise.level, smooth.levels = J - min.level)
mu.est=AvBasis(convert(x.w))
return(mu.est)
}
tt1=waveti.ebayes.old(X.s,filter.number=8,noise.level=sigma.t[1])
tt2=waveti.ebayes(X.s,filter.number=8,noise.level=sigma.t[1])
mse(tt1,mu.t)
mse(tt2,mu.t)
waveti.ebayes=function (x, filter.number = 10, family = "DaubLeAsymm", min.level = 3, noise.level){
n=length(x)
J=log2(n)
x.w <- wd(x, filter.number, family, type = "station")
x.w <- ebayesthresh.wavelet(x.w, vscale = noise.level, smooth.levels = J - min.level, a = NA, threshrule = "mean")
mu.est=AvBasis(convert(x.w))
return(mu.est)
}
tt1=waveti.ebayes.old(X.s,filter.number=8,noise.level=sigma.t[1])
tt2=waveti.ebayes(X.s,filter.number=8,noise.level=sigma.t[1])
mse(tt1,mu.t)
mse(tt2,mu.t)
2600/41000
1/16
x=1:3
y=2:4
!(x%in%y)
load("D:/Grad School/projects/sequence_clustering/debug.RData")
setwd("D:/Grad School/projects/sequence_clustering")
source.with.encoding('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R', encoding='UTF-8')
source.with.encoding('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R', encoding='UTF-8')
sample.res.smooth = cluster.mix(sample.data, smooth=TRUE, K=10, tol=1e-4, maxit=4000)
library(smash)
sample.res.smooth = cluster.mix(sample.data, smooth=TRUE, K=10, tol=1e-4, maxit=4000)
sample.res.smooth = cluster.mix(sample.data, smooth=TRUE, K=10, tol=1e-4, maxit=4000)
sample.res.smooth = cluster.mix(sample.data, smooth=TRUE, K=10, tol=1e-4, maxit=4000)
sample.res.smooth = cluster.mix(sample.data, smooth=TRUE, K=10, tol=1e-4, maxit=4000)
sample.res.smooth = cluster.mix(sample.data, smooth=TRUE, K=10, tol=1e-4, maxit=4000)

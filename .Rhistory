smash(x)
smash(x,model=NULL)
smash(x,model="gaus")
smash(x,model="pois")
smash(x,model="poiss")
x=rpois(256,1)
smash(x)
smash(x,model="gaus")
smash(x,model="poiss")
smash(x)
smash(x, v.est = tRUE)
smash(x, v.est = TRUE)
smash(x, model = "gaus", v.est = TRUE)
smash(x, model = "gaus", v.est = TRUE, joint = TRUE)
?smash
?smash.pois
?smash.poiss
?smash.gaus
library(smash)
?smash
??smash
library(devtools)
install_github("zrxing/smash")
library(smash)
?smash
?smashr
library(devtools)
install_github("zrxing/smashr")
install_github("zrxing/smashr", force = TRUE)
library(multiseq)
mu0 = rep(0.5, 1024)
mu1 = mu0
mu1[401:600] = 1
mu1 = mu1/sum(mu0)
plot(mu0)
lines(mu1,col=2)
plot(mu0,ylim=c(0,1))
lines(mu1,col=2)
sum(mu1)
sum(mu0)
mu0 = rep(0.5, 1024)
mu1 = mu0
mu1[401:600] = 1
mu1 = mu1/sum(mu1)*sum(mu0)
plot(mu0,ylim=c(0,1))
lines(mu1,col=2)
x0 = rpois(5*1024, mu0)
x1 = rpois(5*1024, mu1)
x0 = matrix(rpois(5*1024, mu0), nr = 5)
x1 = matrix(rpois(5*1024, mu1), nr = 5)
plot(x0, )
plot(x0[1,] )
plot(x1[1,] )
plot(x1[,1] )
plot(colMeans(x1))
x0 = matrix(rpois(5*1024, mu0), nr = 5, byrow = TRUE)
x1 = matrix(rpois(5*1024, mu1), nr = 5, byrow = TRUE)
plot(colMeans(x1))
g = rep(c(0, 1), each = 5)
g
x = rbind(x0, x1)
res = multiseq(x, g)
library(devtools)
install_github("zrxing/smashr")
library(smashr)
?smash
library(wavethresh)
edit(wd)
?wd
wd.D = function(data, filter.number = 10, family = "DaubLeAsymm", type = "wavelet", bc = "periodic", verbose = FALSE,
min.scale = 0, precond = TRUE) {
l = wd(data = data, filter.number = filter.number, family = family, type = type, bc = bc, verbose = verbose,
min.scale = min.scale, precond = precond)
return(l$D)
}
x = rnorm(256,0,1)
wd(x)
wd.D(x)
?convert
library(devtools)
install_github("zrxing/smashr")
library(smashr)
?smash
x=rnorm(256,0,1)
smash(x, family = "DaubLeAsymm", filter.number = 8)
?wd
smash(x, 'gaus', family = "DaubLeAsymm", filter.number = 8)
?smash
smash.gaus(x, family = "DaubLeAsymm", filter.number = 8)
smash.gaus(x)
wd(x)
?wd
library(smashr)
?wd
x=rnorm(256,0,1)
smash(x,family="DaubLeAsymm",filter.number=8)
smash(x)
res=smash(x,family="DaubLeAsymm",filter.number=8,post.var=TRUE)
res$var
res$mu.var
res
plot(res$mu.est.var)
plot(res$mu.est)
library(devtools)
install_github("zrxing/smashr")
library(smashr)
?smashr
mu.t = 0.01 + mu.s
# Simulate an example dataset
X.s = rpois(n, mu.t)
# Run smash
mu.est = smash(X.s, "poiss")
# Plot the true mean function as well as the estimated one
plot(mu.t, type = "l")
lines(mu.est, col = 2)
# Create the baseline mean function (The "spikes" function is used as an example here)
n = 2^9
t = 1:n/n
spike.f = function(x) (0.75 * exp(-500 * (x - 0.23)^2) + 1.5 * exp(-2000 * (x - 0.33)^2) + 3 * exp(-8000 * (x - 0.47)^2) +
2.25 * exp(-16000 * (x - 0.69)^2) + 0.5 * exp(-32000 * (x - 0.83)^2))
mu.s = spike.f(t)
# Poisson case
# Scale the signal to be non-zero and to have a low average intensity
mu.t = 0.01 + mu.s
# Simulate an example dataset
X.s = rpois(n, mu.t)
# Run smash
mu.est = smash(X.s, "poiss")
# Plot the true mean function as well as the estimated one
plot(mu.t, type = "l")
lines(mu.est, col = 2)
library(formatR)
?tidt
?tidy
?tidyR
?formatR
?format
??formatR
tidy_source()
library(multiseq)
get.counts
57603732-57607422
?sys
?system.call
region <- split_region(region)
locus.length <- region$end - region$start + 1
samples <- read.table(samplesheet, stringsAsFactors = F,
header = T)
4100-2880.7
setwd("D:/Grad School/projects/sequence_clustering")
expression_data = read.csv("supplemental/gtex/AvgExpr.csv", stringsAsFactors = FALSE)
expression_data_subset = expression_data[, names(expression_data) %in% c("X", "Adipose...Subcutaneous",
"Artery...Tibial",
"Heart...Left.Ventricle",
"Lung",
"Muscle...Skeletal",
"Nerve...Tibial",
"Skin...Sun.Exposed..Lower.leg.",
"Thyroid")]
# for(i in 2:dim(expression_data_subset)[2]){
#   temp = data.frame(gene = expression_data_subset[, 1], tissue = expression_data_subset[, i], stringsAsFactors = FALSE)
#   genes_temp = temp[order(temp[, 2], decreasing = TRUE), 1]
#   genes_temp = genes_temp[1:10]
#   genes = c(genes, genes_temp)
# }
temp = apply(as.matrix(expression_data_subset[, -1]), 1, min)
expression_data_subset = expression_data_subset[order(temp, decreasing = TRUE)[1:50], ]
runinfo = read.csv("supplemental/gtex/rna_seq_runinfo.csv", stringsAsFactors = FALSE)
runinfo_subset = runinfo[runinfo$body_site_s %in% c("Adipose - Subcutaneous",
"Artery - Tibial",
"Heart - Left Ventricle",
"Lung",
"Muscle - Skeletal",
"Nerve - Tibial",
"Skin - Sun Exposed (Lower leg)",
"Thyroid"), ]
known_genes = read.delim("supplemental/gtex/knownGene.txt.gz", header = FALSE, stringsAsFactors = FALSE)
gene_names = read.delim("supplemental/gtex/protein-coding_gene.txt", header = TRUE, stringsAsFactors = FALSE)
gene_names_ensembl = gsub("[.].*$", "", expression_data_subset[, 1])
gene_names_ucsc = gene_names$ucsc_id[gene_names$ensembl_gene_id %in% gene_names_ensembl]
gene_info = known_genes[known_genes$V1 %in% gene_names_ucsc, 1:5]
sample_list = runinfo_subset$Run_s
gene_region = paste0(gsub("^chr", "", gene_info$V2), ":", gene_info$V4, "-", gene_info$V5)
sample_list
gene_region
head(gene_info)
head(runinfo_subset)
head(expression_data_subset)
save(runinfo_subset, gene_region, file = "runinfo_subset.Robj")
save(runinfo_subset, gene_region, file = "supplemental/gtex/runinfo_subset.Robj")
load("supplemental/gtex/runinfo_subset.Robj")
rm(list=ls())
load("supplemental/gtex/runinfo_subset.Robj")
ls
ls()
dim(runinfo_subset)
3000/9
3000/8
length(gene_region)
20*3.75
1200/75
?aggregate
head(runinfo_subset)
?sample
aggregate(RUn_s ~ body_site_s, data = runinfo_subset, FUN = sample)
aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample)
aggregate(Run_s ~ body_site_s, data = runinfo_subset)
aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample)
tt = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample)
dim(tt)
tt[1,]
tt[1,2]
length(runinfo_subset$body_site_s=="Adipose - Subcutaneous")
sum(runinfo_subset$body_site_s=="Adipose - Subcutaneous")
tt = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample, n = 100)
sample_100 = function(x) sample(x, size = 100)
tt = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample_100)
head(tt)
dim(tt)
tt[1,]
runinfo_subset[runinfo_subset$Run_s=="SRR655637",]
tt[1,2]
samples_subset_temp = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample_fixed)
sample_fixed = function(x) sample(x, size = sample_size)
samples_subset_temp = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample_fixed)
head(samples_subset_temp)
sample_size = 100
sample_fixed = function(x) sample(x, size = sample_size)
samples_subset_temp = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample_fixed)
head(samples_subset_temp)
samples_subset_temp[1,]
samples_subset_temp[1,][[1]]
samples_subset_temp[1,][[2]]
samples_subset = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample_fixed)
samples_subset[1,][[1]]
tt = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample)
tt[1,]
tt[1,][[2]]
tt[2,][[2]]
tt[3,][[2]]
tt[4,][[2]]
tt[5,][[2]]
tt[6,][[2]]
tt[7,][[2]]
tt[8,][[2]]
tt[8,][[2]][1]
tt[8,][[2]]
tt[8,]
tt[8,]$RUn_s
samples_subset = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample_fixed)
samples_subset[1,]
samples_subset[1,][[1]]
samples_subset[1,][[2]]
samples_subset[1,][[2]][1]
samples_subset[1,][[2]][2]
samples_subset[1,][[2]][1,1]
samples_subset[1,][[2]][1,2]
region=chr1:11740409-11756792
region_split = split_region(region)
region_split$chr = gsub("[^0-9]", "", region_split$chr)
region_split
region="chr1:11740409-11756792"
region_split = split_region(region)
region_split$chr = gsub("[^0-9]", "", region_split$chr)
library(multiseq)
region_split = split_region(region)
region_split$chr = gsub("[^0-9]", "", region_split$chr)
region_split
paste(samples_subset[1, ][[2]][1, 1], region_split$chr, region_split$start, region_split$end, sep = "_")
region_split$end - region_split$start + 1
gene_region
tt=list()
tt[[1]][[1]]=1
tt[[1]]=list()
tt[[1]][[1]]=1
tt
samples_subset = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample)
samples_subset[[1]][[2]]
samples_subset[[1]]
samples_subset[1,]
samples_subset[1,][[2]]
samples_subset[1,][[2]][[1]]
samples_subset[2,][[2]][[1]]
?exist
?file.exist
?file.exists
aa = c(0, 1, 4, NA, 3, NA, 4, 5)
bb = 0
j = 1
k = 1
while(j <= 5){
if(!is.na(aa)){
bb[j] = aa[k]
j = j + 1
k = k + 1
}else{
k = k + 1
next
}
}
aa = c(0, 1, 4, NA, 3, NA, 4, 5)
bb = 0
j = 1
k = 1
while(j <= 5){
if(!is.na(aa[k])){
bb[j] = aa[k]
j = j + 1
k = k + 1
}else{
k = k + 1
next
}
}
bb
aa = c(0, 1, 4,  3, 4, 5)
bb = 0
j = 1
k = 1
while(j <= 5){
if(!is.na(aa[k])){
bb[j] = aa[k]
j = j + 1
k = k + 1
}else{
k = k + 1
next
}
}
bb
region_list
gene_region
paste0("load('data/gtex/reads_50_", gene_region, ".Robj')")
load(paste0("'data/gtex/reads_100_", gene_region, ".Robj')")
load(paste0("'data/gtex/reads_100_", gene_region, ".Robj'"))
paste0("'data/gtex/reads_100_", gene_region, ".Robj'")
load(paste0("data/gtex/reads_100_", gene_region, ".Robj"))
paste0("data/gtex/reads_100_", gene_region, ".Robj")
load(paste0("data/gtex/reads_100_", gene_region[1], ".Robj"))
paste0("data/gtex/reads_100_", gene_region[1], ".Robj")
load(paste0("data/gtex/reads_100_", gene_region[15], ".Robj"))
getwd()
load(paste0("data/gtex/reads_100_", gene_region[15], ".Robj"))
gene_region = read.table("supplemental/gtex/gene_region.txt")
gene_region
gsub("[:]", "_", gene_region)
gsub("[:]", "_", gene_region[1])
gsub("[:]", "[_]", gene_region[1])
gsub(":", "_", gene_region[1])
gsub("\:", "_", gene_region[1])
gsub("\\:", "_", gene_region[1])
gsub("\\:", "\\_", gene_region[1])
gsub("\\:", "", gene_region[1])
gene_region[1]
gene_region[1,1]
gene_region = read.table("supplemental/gtex/gene_region.txt", stringsAsFactors = FALSE)
gene_region
gene_region = read("supplemental/gtex/gene_region.txt", stringsAsFactors = FALSE)
gene_region
?read
?read.table
gene_region = read.table("supplemental/gtex/gene_region.txt", stringsAsFactors = FALSE)
gene_region
as.vector(gene_region)
gene_region[1]
gene_region[1,1]
unlist(gene_region)
unlist(gene_region,use.names = FALSE)
gene_region = unlist(gene_region, use.names = FALSE)
gsub("\\:", "", gene_region[1])
gsub("\\:", "_", gene_region[1])
gsub("\\:", "_", gene_region)
gene_region = gsub("\\:", "_", gene_region)
load(paste0("data/gtex/reads_100_", gene_region[15], ".Robj"))
gene_region = gsub("\\-", "_", gene_region)
load(paste0("data/gtex/reads_100_", gene_region[15], ".Robj"))
for(i in 1:8){
sum(rowSums(reads[[i]][[2]]) == 0)
}
for(i in 1:8){
print(sum(rowSums(reads[[i]][[2]]) == 0))
}
check = 0
for(i in 1:8){
check[i]= check + print(sum(rowSums(reads[[i]][[2]]) == 0))
}
check
check = 0
for(i in 1:8){
check= check + print(sum(rowSums(reads[[i]][[2]]) == 0))
}
check
check = 0
for(i in 1:8){
check= check + sum(rowSums(reads[[i]][[2]]) == 0)
}
check
rowSums(reads[[i]][[2]])
for(i in 1:length(gene_region)){
load(paste0("data/gtex/reads_100_", gene_region[i], ".Robj"))
check = 0
for(i in 1:8){
check= check + sum(rowSums(reads[[i]][[2]]) == 0)
}
print(check)
}
gene_region
#check to see if there are any regions with 0 total reads
for(i in 1:length(gene_region)){
load(paste0("data/gtex/reads_100_", gene_region[i], ".Robj"))
check = 0
for(i in 1:8){
check = check + sum(rowSums(reads[[i]][[2]]) == 0)
}
print(check)
}
sum(rowSums(reads[[i]][[2]]) == 0)
rowSums(reads[[i]][[2]]) == 0
strsplit("a_b_c", "_")
unlist(strsplit("a_b_c", "_"))
unlist(strsplit("a_b_c", "_"))[-(1:2)]
reads
ls()
reads[[1]]
reads[[1]][[1]]
reads[[1]][[2]]
gene_Region
gene_region
strsplit(gene_region)
strsplit(gene_region, "_")
gene_region_split = strsplit(gene_region, "_")
for(i in 1:21){
print(gene_region_split[[i]][3] - gene_region_split[[i]][2])
}
gene_region_split[[i]][3]
for(i in 1:21){
print(as.numeric(gene_region_split[[i]][3]) - as.numeric(gene_region_split[[i]][2]))
}
log2(35028)
35028*4
tissue1 = NULL
tissue2 = NULL
for(i in 1:7){
tissue1[i] = c(tissue1, reads[[i]][[1]])
tissue2[i] = c(tissue2, reads[[i+1]][[1]])
}
tissue1
warnings()
reads[[i]][[1]]
tissue2 = NULL
for(i in 1:7){
#   reads[[i]][[1]] =
tissue1 = c(tissue1, reads[[i]][[1]])
tissue2 = c(tissue2, reads[[i+1]][[1]])
}
tissue1 = NULL
tissue2 = NULL
for(i in 1:7){
#   reads[[i]][[1]] =
tissue1 = c(tissue1, reads[[i]][[1]])
tissue2 = c(tissue2, reads[[i+1]][[1]])
}
tissue1
tissue2
tissue1 = NULL
tissue2 = NULL
for(i in 1:7){
temp = reads[[i]][[1]]
temp = gsub(" .*$", "", temp)
tissue1 = c(tissue1, reads[[i]][[1]])
}
for(i in 2:8){
temp = reads[[i]][[1]]
temp = gsub(" .*$", "", temp)
tissue2 = c(tissue2, reads[[i]][[1]])
}
tissue1
tissue2
tissue1 = NULL
tissue2 = NULL
for(i in 1:7){
temp = reads[[i]][[1]]
temp = gsub(" .*$", "", temp)
tissue1 = c(tissue1, temp)
}
for(i in 2:8){
temp = reads[[i]][[1]]
temp = gsub(" .*$", "", temp)
tissue2 = c(tissue2, temp)
}
tissue1
tissue2
region
?strsplit
?paste
file = "../../data/gtex/test_file.Robj"
gsub("/.*$", "", file)
unlist(strsplit(region, "[/]"))
unlist(strsplit(file, "[/]"))
region = unlist(strsplit(file, "[/]"))
region[length(region)]
for(i in 1:21){
print(gene_region_split[[i]][3] - gene_region_split[[i]][2])
}
ene_region_split
gene_region_split
for(i in 1:21){
print(as.numeric(gene_region_split[[i]][3]) - as.numeric(gene_region_split[[i]][2]))
}
2^15
10000*5*8
4000*30*8

y = rpois(1024, 0)
y = rpois(1024, 1)
y
mean(y)
est = smooth.pois(y)
est = ashsmooth.pois(y)
plot(est,type='l')
plot(est,type='l', ylim=c(0,1))
plot(est,type='l', ylim=c(0.5, 1.5))
y = rpois(1024, 100)
est = ashsmooth.pois(y)
plot(est,type='l', ylim=c(0.5, 1.5))
plot(est,type='l', ylim=c(90, 110))
y = rpois(1024, 100)
est = ashsmooth.pois(y)
plot(est,type='l', ylim=c(90, 110))
y = rpois(1024, 100)
est = ashsmooth.pois(y)
plot(est,type='l', ylim=c(90, 110))
y = rpois(1024, 1)
set.seed(513)
y = rpois(1024, 1)
ParentTItable
smash::ParentTItable
smash:::ParentTItable
ashsmooth.pois
getlist.res
smash:::getlist.res
set.seed(513)
y = rpois(n, 1)
wc = as.vector(t(smash:::ParentTItable(y)$parent))
zdat = glm.approx(wc, g = NULL, minobs = 1, pseudocounts = 0.5,
center = FALSE, all = TRUE, forcebin = TRUE, repara = TRUE,
lm.approx = TRUE, disp = "add", bound = 0.02)
j = 1
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
n = 1024
J = 10
set.seed(513)
y = rpois(n, 1)
wc = as.vector(t(smash:::ParentTItable(y)$parent))
zdat = glm.approx(wc, g = NULL, minobs = 1, pseudocounts = 0.5,
center = FALSE, all = TRUE, forcebin = TRUE, repara = TRUE,
lm.approx = TRUE, disp = "add", bound = 0.02)
j = 1
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat)
hist(bhat/shat,breaks=100)
j = 2
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100)
j = 3
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100)
j = 4
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100)
j = 4
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100)
j = 5
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100)
j = 8
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100)
j = 10
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100)
j = 7
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100)
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(dnorm(seq(-4, 4, 0.01)))
dnorm(seq(-4, 4, 0.01))
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(dnorm(seq(-4, 4, 0.01)))
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)))
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 1
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 2
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 3
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 4
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 5
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 6
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 7
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 8
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 9
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[1, ind]
shat = zdat[2, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
m = 40
y = rpois(m * n, 1)
wc = matrix(nrow = m, ncol = 2 * J * n); for(i in 1:nsimg){tt = smash:::ParentTItable(y[i, ]); wc[i, ] = as.vector(t(tt$parent))}
wc = matrix(nrow = m, ncol = 2 * J * n); for(i in 1:m){tt = smash:::ParentTItable(y[i, ]); wc[i, ] = as.vector(t(tt$parent))}
y = matrix(rpois(m * n, 1), nr = m, ncol = n)
wc = matrix(nrow = m, ncol = 2 * J * n); for(i in 1:m){tt = smash:::ParentTItable(y[i, ]); wc[i, ] = as.vector(t(tt$parent))}
ashsmooth.pois
zdat = glm.approx(wc, g = rep(0:1 , each = m/2), minobs = 1, pseudocounts = 0.5, center = FALSE, all = FALSE, forcebin = TRUE, repara = TRUE, lm.approx = TRUE, disp = "add")
j = 9
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 1
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 100, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 2
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 3
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 4
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 5
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 8
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 9
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
m = 4
y = matrix(rpois(m * n, 1), nr = m, ncol = n)
wc = matrix(nrow = m, ncol = 2 * J * n); for(i in 1:m){tt = smash:::ParentTItable(y[i, ]); wc[i, ] = as.vector(t(tt$parent))}
zdat = glm.approx(wc, g = rep(0:1 , each = m/2), minobs = 1, pseudocounts = 0.5, center = FALSE, all = FALSE, forcebin = TRUE, repara = TRUE, lm.approx = TRUE, disp = "add")
j = 9
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 1
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 2
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
j = 3
ind = ((j - 1) * n + 1):(j * n)
bhat = zdat[3, ind]
shat = zdat[4, ind]
hist(bhat/shat, breaks = 40, freq = FALSE)
lines(seq(-4, 4, 0.01), dnorm(seq(-4, 4, 0.01)), col = 2)
top_eqtl
library(dplyr)
?sperad
?spread
library(tidyr)
?spread
27500*1.45
baseline=rep(0.01,1024)
effect=rep(0,1024)
effect[400:500]=log(2)
g=c(0,0,0,1,1,1,2,2,2,2,2)
logl=matrix(0,11,1024)
for(i in 1:11){
logl[i,]=baseline+g[i]*effect
}
plot(logl[1,])
plot(logl[3,])
plot(logl[5,])
plot(logl[10,])
simdata=rpois(11*1024,logl)
plot(simdata[1,])
simdata=matrix(rpois(11*1024,logl),11,1024)
simdata[1,]
plot(simdata[1,])
plot(simdata[6,])
plot(simdata[9,])
tt=multiseq(simdata,g,lm.approx=TRUE)
library(multiseq)
tt=multiseq(simdata,g,lm.approx=TRUE)
plot(tt$baseline.mean)
plot(tt$effect.mean)
plot(tt$effect.mean,type='l')
plot(tt$baseline.mean,type='l')
plot(exp(tt$baseline.mean),type='l')
plot(exp(tt$effect.mean),type='l')
tt=multiseq(simdata,g,lm.approx=FALSE)
plot(tt$baseline.mean,type='l')
tt=multiseq(simdata,g,center=TRUE)
plot(tt$baseline.mean,type='l')
tt=multiseq(simdata,g,center=FALSE)
plot(tt$baseline.mean,type='l')
tt=multiseq(simdata,g,center=TRUE,baseline="grp")
plot(tt$baseline.mean,type='l')
tt=multiseq(simdata,g,center=TRUE,baseline="inter")
plot(tt$baseline.mean,type='l')
tt=multiseq(simdata,g,repara=FALSE)
plot(tt$baseline.mean,type='l')
tt=multiseq(simdata,g,repara=TRUE)
plot(tt$baseline.mean,type='l')
g=c(0,0,0,1,1,1)
logl=matrix(0,6,1024)
for(i in 1:6){
logl[i,]=baseline+g[i]*effect
}
simdata=matrix(rpois(6*1024,logl),6,1024)
tt=multiseq(simdata,g,repara=TRUE)
plot(tt$baseline.mean,type='l')
tt=multiseq(simdata,g,lm.approx=FALSE)
plot(tt$baseline.mean,type='l')
tt=multiseq(simdata,g,lm.approx=TRUE)
plot(tt$baseline.mean,type='l')
log(0.01)
spike.f=function(x) (0.75*exp(-500*(x-0.23)^2)+1.5*exp(-2000*(x-0.33)^2)+3*exp(-8000*(x-0.47)^2)+2.25*exp(-16000*(x-0.69)^2)+0.5*exp(-32000*(x-0.83)^2))
#spike.f=function(x) (0.75*exp(-500*(x-0.23)^2)+1.5*exp(-1000*(x-0.33)^2)+3*exp(-500*(x-0.47)^2)+2.25*exp(-500*(x-0.69)^2)+0.5*exp(-500*(x-0.83)^2))
n=1024
xgrid=1:n/n
mu.s=spike.f(1:n/n)
mu.s0=1
set.seed(415)
X.s=rpois(n,mu.s0*(0.02+mu.s))
set.seed(527)
X.ss=rpois(n,mu.s0*(0.02+mu.s))
mse=function(x,y) mean((x-y)^2)
n=length(X.s)
J=log2(n)
mu.s0=2
set.seed(415)
X.s1=rpois(n,mu.s0*(0.02+mu.s))
mu.s0=3
set.seed(415)
X.s2=rpois(n,mu.s0*(0.02+mu.s))
mu.s0=4
set.seed(415)
X.s3=rpois(n,mu.s0*(0.02+mu.s))
set.seed(604)
X.test=rpois(1024,5*(0.5+mu.s))
set.seed(519)
X.s4=rpois(n,1*(0.02+c(mu.s[-(1:100)],mu.s[1:100])))
set.seed(601)
X.s5=rpois(n,1*(0.02+c(mu.s[-(1:200)],mu.s[1:200])))
X.s6=(X.s+X.s5)/2
X=rbind(X.s,X.s4)
library(smash)
tb=ashsmooth.pois(X[1,])
plot(tb,type='l')
X[1,]
tb=ashsmooth.pois(X.s)
plot(tb,type='l')
X.s
mu.s0*(0.02+mu.s)
?dt
287/5+121/5-15
287/5+121/5-15+8
library(centipede)
library(CENTIPEDE)
data(NRSFcuts, package='CENTIPEDE')
data(NRSF_Anno, package='CENTIPEDE')
dim(NRSFcuts)
dim(NRSF_Anno)
head(NRSF_Anno)
head(NRSFcuts)
0.6*90
54+6+61
54+66+61
23277*1.45
25000*1.45
30000*1.45
28000*1.45
29000+160*18
3880*1.45
3880*1.45
31880*1.45
338880*1.45
33880*1.45
29300*1.45
32300*1.45
34300*1.45
49700-33000
4800-33000
46800-33000
2000/30000
2500/40000
tt = matrix(c(2,0,2,0,2,0),nr=3)
tt
tt = matrix(c(2,0,2,0,2,0,1,0,2,0,3,0),nr=3)
tt
tt = matrix(c(2,0,2,0,2,0,1,0,2,0,3,0),nr=6)
ttt
tt
zero.ind = rowSums(tt) == 0
zero.ind
tt[zero.ind, ]
tt[zero.ind, ] = 1:2
tt
tt[zero.ind, ]
tt = matrix(c(2,0,2,0,2,0,1,0,2,0,3,0),nr=6)
tt
zero.ind = rowSums(tt) == 0
zero.ind
tt[zero.ind, ]
tt[zero.ind, ] = matrix(rep(1:2, length(zero.ind)), yrow=TRUE, nr = length(zero.ind))
tt[zero.ind, ] = matrix(rep(1:2, length(zero.ind)), byrow=TRUE, nr = length(zero.ind))
matrix(rep(1:2, length(zero.ind)), byrow=TRUE, nr = length(zero.ind))
length(zero.ind)
tt = matrix(c(2,0,2,0,2,0,1,0,2,0,3,0),nr=6)
tt
zero.ind = rowSums(tt) == 0
zero.ind
tt[zero.ind, ] = matrix(rep(1:2, sum(zero.ind)), byrow=TRUE, nr = sum(zero.ind))
tt
setwd("D:/Grad School/projects/sequence_clustering")
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
library(maptpx)
library(smash)
get.max=function(x) which(x==max(x))
normalize=function(x){
#if(sum(abs(x))!=0){
return(x/sum(x))
#}else{
#  return(rep(0,length(x)))
#}
}
K=4
n=20
B=1024
lambda.true=matrix(0.1,nrow=4,ncol=1024)
lambda.true[1,100:200]=1
lambda.true[2,300:400]=10
lambda.true[3,500:600]=3  #ML doesn't work well if this is 1
lambda.true[4,700:800]=5
phi.true=t( apply(lambda.true,1,normalize))
pi.true=matrix(0,n,4)
for(i in 1:n){
set.seed(10*i)
clus.ini=sample(1:K,1)
pi.true[i,clus.ini]=0.7
pi.true[i,-clus.ini]=0.1
}
yt=0
clus.ind=0
y=matrix(0,nrow=n,ncol=B)
for(i in 1:n){
yt[i]=rpois(1,sum(pi.true[i,]*rowSums(lambda.true)))
p.mult=colSums((pi.true[i,]%o%rep(1,B))*phi.true)
y[i,]=rmultinom(1,yt[i],p.mult)
}
negloglik.mix(y,pi.true,phi.true,20,4,1024)
res=cluster.mix(y,smooth=TRUE,K=4,tol=1e-4,maxit=4000)
y=matrix(0,nrow=n,ncol=B)
for(i in 1:n){
for(b in 1:B){
lambda=sum(pi.true[i,]*lambda.true[,b])
y[i,b]=rpois(1,lambda)
}
}
res=cluster.mix(y,smooth=TRUE,K=4,tol=1e-4,maxit=4000)
load("D:/Grad School/projects/sequence_clustering/results/good_eg_mix.Rdata.RData")
res=cluster.mix(y,smooth=TRUE,K=4,tol=1e-4,maxit=4000)
load("D:/Grad School/projects/sequence_clustering/results/bad_eg_mix.RData")
res=cluster.mix(y,smooth=TRUE,K=4,tol=1e-4,maxit=4000)
rm(list=ls())
getwd()
load("data/oas1/OAS1.Robj")
ls()
Robj
attr(Robj)
attrivutes(Robj)
attributes(Robj)
data = Robj$M
M
data
data.as.matrix(data)
data = as.matrix(data)
data
data = Robj$M
data = matrix(data)
data
data = Robj$M
as.matrix$data$M
as.matrix(data$M)
data = Robj$M
data = as.matrix(data$M)
data
dim(data)
res=cluster.mix(data,smooth=TRUE,K=3,tol=1e-4,maxit=4000)
source("src/cluster_seq_mix.R")
res=cluster.mix(data,smooth=TRUE,K=3,tol=1e-4,maxit=4000)
plot(colMeans(data))
res=cluster.mix(data[, 2049:4096],smooth=TRUE,K=3,tol=1e-4,maxit=4000)
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
res=cluster.mix(data[, 2049:4096],smooth=TRUE,K=3,tol=1e-4,maxit=4000)
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
res=cluster.mix(data[, 2049:4096],smooth=TRUE,K=3,tol=1e-4,maxit=4000)
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
res=cluster.mix(data[, 2049:4096],smooth=TRUE,K=3,tol=1e-4,maxit=4000)
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
res=cluster.mix(data[, 2049:4096],smooth=TRUE,K=3,tol=1e-4,maxit=4000)
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
res=cluster.mix(data[, 2049:4096],smooth=TRUE,K=3,tol=1e-4,maxit=4000)
tt=matrix(c(1,1,0,0,2,2),3,2)
tt
tt==0
tt[tt==0]=runif(sum(tt==0),0,1e-12)
tt
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
res=cluster.mix(data[, 2049:4096],smooth=TRUE,K=3,tol=1e-4,maxit=4000)
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
res=cluster.mix(data[, 2049:4096],smooth=TRUE,K=3,tol=1e-4,maxit=4000)
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')
res=cluster.mix(data[, 2049:4096],smooth=TRUE,K=3,tol=1e-4,maxit=4000)
plot(res$phi[1,],type='l')
plot(res$phi[2,],type='l')
lines(res$phi[1,],co2)
lines(res$phi[1,],col=2)
lines(res$phi[3,],col=3)
res$phi
plot(res$lambda[2,],type='l')
lines(res$lambda[1,],col=2)
lines(res$lambda[3,],col=4)
save.image("D:/Grad School/projects/sequence_clustering/results/analysis_oas1/test_initial_smooth.RData")
source('D:/Grad School/projects/sequence_clustering/src/cluster_seq_mix.R')

}
mu.est.h1 = wr(x.w)
#################
filter.number = 8
family = "DaubLeAsymm"
n = length(x)
J = log2(n)
if (!isTRUE(all.equal(J, trunc(J)))) {
stop("Error: number of columns of x must be power of 2")
}
ashparam = smash:::setAshParam.gaus(ashparam)
if (v.est == TRUE) {
weight = 1
} else {
weight = 0.5
}
# if(post.var==TRUE&basis[[1]]!='haar'){stop('Error: posterior variances returned only with Haar basis')}
if (post.var == TRUE & v.est == TRUE & jash == TRUE) {
stop("Error: Posterior variances for variance estimate not returned for method JASH")
}
if (joint == TRUE) {
v.est = TRUE
}
tsum = sum(x)
Wl = NULL
x.w.d = wd(x, filter.number = filter.number, family = family)
Wl = wt.mat(n, filter.number = filter.number, family = family)
wc=x.w.d
data.var=sigma.cor.3.v2^2
wmean = matrix(0, J, n)
wvar = matrix(0, J, n)
loglr.s8=0
x.w = wc
x.w.v = apply((rep(1, n - 1) %o% data.var) * Wl$W2, 1, sum)  #diagonal of W*V*W'
x.w.v.s = rep(0, n * J)
for (j in 0:(J - 1)) {
x.pm = rep(0, 2^j)
spins=2^(J-j)
if(j!=(J-1)){
index = (sum(n/(2^(1:(J-j-1))))+1):sum(n/(2^(1:(J-j))))
}else{
index = 1:sum(n/2)
}
x.w.j = accessD(x.w, j)
x.w.v.j = x.w.v[index]
ind.nnull = (x.w.v.j != 0)
zdat.ash = smash:::shrink.wc(x.w.j[ind.nnull], sqrt(x.w.v.j[ind.nnull]), prior = ashparam$prior, pointmass = ashparam$pointmass,
nullcheck = ashparam$nullcheck, VB = ashparam$VB, mixsd = ashparam$mixsd, mixcompdist = ashparam$mixcompdist, gridmult = ashparam$gridmult, jash = FALSE,
df = NULL, SGD = FALSE)
x.pm[ind.nnull] = zdat.ash$PosteriorMean
x.pm[!ind.nnull] = 0
x.w = putD(x.w, j, x.pm)
zdat.ash$model = "EE"
loglr.temp = ashr:::calc_loglik(zdat.ash,x.w.j[ind.nnull], sqrt(x.w.v.j[ind.nnull]),NULL) -
sum(dnorm(x.w.j[ind.nnull], 0, sqrt(x.w.v.j[ind.nnull]), log = TRUE))
loglr.s8[j+1]=loglr.temp/spins
}
mu.est.s8 = wr(x.w)
loglr.h1
loglr.s8
plot(mu.est.h1,type='l')
lines(mu.est.s8,col=2)
mse(mu.est.h1,mu.cor)
mean((mu.est.h1-mu.cor)^2)
mean((mu.est.s8-mu.cor)^2)
sum(loglr.h1)
sum(loglr.s8)
tt=matrix(sample(0:2,10,replace=TRUE),nr=5)
tt
is.integer(tt)
library(devtools)
install_github("zrxing/smash")
library(devtools)
install_github("zrxing/smash")
library(devtools)
install_github("zrxing/smash")
library(smash)
?smash
x=rnorm(256,1,1)
smash(x)
library(smash)
x=rnorm(256,1,1)
smash(x)
library(devtools)
install_github("zrxing/smash")
library(smash)
x=rnorm(256,1,1)
smash(x)
smash(x,model=NULL)
smash(x,model="gaus")
smash(x,model="pois")
smash(x,model="poiss")
x=rpois(256,1)
smash(x)
smash(x,model="gaus")
smash(x,model="poiss")
smash(x)
smash(x, v.est = tRUE)
smash(x, v.est = TRUE)
smash(x, model = "gaus", v.est = TRUE)
smash(x, model = "gaus", v.est = TRUE, joint = TRUE)
?smash
?smash.pois
?smash.poiss
?smash.gaus
library(smash)
?smash
??smash
library(devtools)
install_github("zrxing/smash")
library(smash)
?smash
?smashr
library(devtools)
install_github("zrxing/smashr")
install_github("zrxing/smashr", force = TRUE)
library(multiseq)
mu0 = rep(0.5, 1024)
mu1 = mu0
mu1[401:600] = 1
mu1 = mu1/sum(mu0)
plot(mu0)
lines(mu1,col=2)
plot(mu0,ylim=c(0,1))
lines(mu1,col=2)
sum(mu1)
sum(mu0)
mu0 = rep(0.5, 1024)
mu1 = mu0
mu1[401:600] = 1
mu1 = mu1/sum(mu1)*sum(mu0)
plot(mu0,ylim=c(0,1))
lines(mu1,col=2)
x0 = rpois(5*1024, mu0)
x1 = rpois(5*1024, mu1)
x0 = matrix(rpois(5*1024, mu0), nr = 5)
x1 = matrix(rpois(5*1024, mu1), nr = 5)
plot(x0, )
plot(x0[1,] )
plot(x1[1,] )
plot(x1[,1] )
plot(colMeans(x1))
x0 = matrix(rpois(5*1024, mu0), nr = 5, byrow = TRUE)
x1 = matrix(rpois(5*1024, mu1), nr = 5, byrow = TRUE)
plot(colMeans(x1))
g = rep(c(0, 1), each = 5)
g
x = rbind(x0, x1)
res = multiseq(x, g)
library(devtools)
install_github("zrxing/smashr")
library(smashr)
?smash
library(wavethresh)
edit(wd)
?wd
wd.D = function(data, filter.number = 10, family = "DaubLeAsymm", type = "wavelet", bc = "periodic", verbose = FALSE,
min.scale = 0, precond = TRUE) {
l = wd(data = data, filter.number = filter.number, family = family, type = type, bc = bc, verbose = verbose,
min.scale = min.scale, precond = precond)
return(l$D)
}
x = rnorm(256,0,1)
wd(x)
wd.D(x)
?convert
library(devtools)
install_github("zrxing/smashr")
library(smashr)
?smash
x=rnorm(256,0,1)
smash(x, family = "DaubLeAsymm", filter.number = 8)
?wd
smash(x, 'gaus', family = "DaubLeAsymm", filter.number = 8)
?smash
smash.gaus(x, family = "DaubLeAsymm", filter.number = 8)
smash.gaus(x)
wd(x)
?wd
library(smashr)
?wd
x=rnorm(256,0,1)
smash(x,family="DaubLeAsymm",filter.number=8)
smash(x)
res=smash(x,family="DaubLeAsymm",filter.number=8,post.var=TRUE)
res$var
res$mu.var
res
plot(res$mu.est.var)
plot(res$mu.est)
library(devtools)
install_github("zrxing/smashr")
library(smashr)
?smashr
mu.t = 0.01 + mu.s
# Simulate an example dataset
X.s = rpois(n, mu.t)
# Run smash
mu.est = smash(X.s, "poiss")
# Plot the true mean function as well as the estimated one
plot(mu.t, type = "l")
lines(mu.est, col = 2)
# Create the baseline mean function (The "spikes" function is used as an example here)
n = 2^9
t = 1:n/n
spike.f = function(x) (0.75 * exp(-500 * (x - 0.23)^2) + 1.5 * exp(-2000 * (x - 0.33)^2) + 3 * exp(-8000 * (x - 0.47)^2) +
2.25 * exp(-16000 * (x - 0.69)^2) + 0.5 * exp(-32000 * (x - 0.83)^2))
mu.s = spike.f(t)
# Poisson case
# Scale the signal to be non-zero and to have a low average intensity
mu.t = 0.01 + mu.s
# Simulate an example dataset
X.s = rpois(n, mu.t)
# Run smash
mu.est = smash(X.s, "poiss")
# Plot the true mean function as well as the estimated one
plot(mu.t, type = "l")
lines(mu.est, col = 2)
library(formatR)
?tidt
?tidy
?tidyR
?formatR
?format
??formatR
tidy_source()
library(multiseq)
get.counts
57603732-57607422
?sys
?system.call
region <- split_region(region)
locus.length <- region$end - region$start + 1
samples <- read.table(samplesheet, stringsAsFactors = F,
header = T)
4100-2880.7
library(formatR)
tidy_source()
tidy_source()
tidy_source()
c
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
tidy_source()
library(devtools)
install_github("zrxing/smashr")
?vignette
vignette(smashr)
vignette("smashr")
10/13
9/13
1/14
11/14
2100*0.67
2250*0.67
100*1.8
1800*1.5
1800*1.45
4955*2
9910
10057
5000+7400+8900+4950
150*18
165*18
700*0.4
y = 0.5*rnorm(10000,0,1)+0.5*rnorm(10000,0,2)
var(y)
0.5*1+0.5*4
0.5*0.5^2+0.5*0.5^2
0.5*0.5+0.5*0.5
0.5^2
0.5*0.5^2+0.5*0.7^2
0.5*0.5+0.5*0.7
0.6^2
0.5*0.1^2+0.5*0.2^2
(0.5*0.1+0.5*0.2)^2
0.4*1.2^2+0.6*1^2
(0.4*1.2+0.6*1)^2
log2(0.5)
2^15
11*5*850000
source("../../src/cluster_seq_mix.R")
setwd("D:/Grad School/projects/sequence_clustering/results/analysis_gtex")
source("../../src/cluster_seq_mix.R")
K = 2
sample_size = 100
region = "2_55459038_55462989"
file = paste0("reads_100_", region, ".Robj")
load(file.path("../../data/gtex", file))
data_matrix = NULL
tissue_name = NULL
for(i in 1:8){
data_temp = reads[[i]][[2]]
sample_ind = sample(1:100, sample_size)
data_temp = data_temp[sample_ind, ]
data_matrix = rbind(data_matrix, data_temp)
tissue_name_temp = reads[[i]][[1]]
tissue_name_temp = gsub(" .*$", "", tissue_name_temp)
tissue_name = c(tissue_name, tissue_name_temp)
}
y = data_matrix
n=dim(y)[1]
B=dim(y)[2]
kmeans.init=kmeans(y,K,nstart=5)
pi0=rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
phi0=t(apply(kmeans.init$centers,1,normalize))
row.names(phi0)=NULL
phi=phi0
pi=pi0
tt = matrix(1:10,nr=5)
tt
tt = matrix(1:20,nr=5)
tt
tt = matrix(1:20,nr=10)
tt
array(tt,3)
array(tt,dim=3)
?array
tt
array(tt,dim=c(5,2,2))
array(tt,dim=c(2,5,2))
array(tt,dim=c(5,2,2))
ttt=array(tt,dim=c(5,2,2))
apply(ttt,2,sum)
apply(ttt,3,sum)
apply(ttt,1,sum)
apply(ttt,1,colSums)
apply(ttt,2,colSums)
tt
sum(1:5)
sum(6:10)
sum(11:15)
sample-size=5
sample_size=5
data_matrix = NULL
tissue_name = NULL
for(i in 1:8){
data_temp = reads[[i]][[2]]
sample_ind = sample(1:100, sample_size)
data_temp = data_temp[sample_ind, ]
data_matrix = rbind(data_matrix, data_temp)
tissue_name_temp = reads[[i]][[1]]
tissue_name_temp = gsub(" .*$", "", tissue_name_temp)
tissue_name = c(tissue_name, tissue_name_temp)
}
y=data_matrix
n=dim(y)[1]
B=dim(y)[2]
kmeans.init=kmeans(y,K,nstart=5)
pi0=rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
phi0=t(apply(kmeans.init$centers,1,normalize))
#phi0[phi0==0]=pseudocounts
#phi0=t(apply(phi0,1,normalize))
row.names(phi0)=NULL
phi=phi0
pi=pi0
gamma=pi[rep(1:n,each=B),]*t(phi)[rep(1:B,n),]
gamma1=t(apply(gamma,1,normalize))
gamma2=gamma/rowSums(gamma)
gamma1-gamma2
gamma1[4998,]
gamma2[4998,]
gamma1[1,]
gamma1[2,]
gamma1[10,]
gamma1[12,]
gamma2[12,]
sum(gamma1-gamma2,na.rm=TrUE)
sum(gamma1-gamma2,na.rm=TR
UE)
sum(gamma1-gamma2,na.rm=TRUE)
gamma1=t(apply(gamma,1,normalize))
gamma2=gamma/rowSums(gamma)
phi1=kmeans.init$centers/rowSums(kmeans.init$centers)
phi1-phi0
sum(phi1-phi0)
gamma=gamma/rowSums(gamma)
gamma[is.na(gamma)]=1/K
gammab=(as.vector(t(y))%o%rep(1,K))*gamma
phi1=kmeans.init$centers/rowSums(kmeans.init$centers)
pi.num=(diag(1,n)[,rep(1:n,each=B)])%*%gammab
dim((diag(1,n)[,rep(1:n,each=B)]))
pi.num1=apply(array(gammab,dim=c(B,n,K)),2,colSums)
pi.num1-pi.num
dim(pi.num1)
dim(pi.num)
pi.num1=t(apply(array(gammab,dim=c(B,n,K)),2,colSums))
pi.num1-pi.num
sum(pi.num1-pi.num)
sum(abs(pi.num1-pi.num)^2)
sum(abs(pi.num1-pi.num))
pi=pi.num/(rowSums(y)%o%rep(1,K))
ybt=(diag(1,B)[,rep(1:B,n)])%*%gammab
(diag(1,5)[,rep(1:5,3)])
tt
array(tt,dim=c(5,2,2))
ttt
apply(ttt,1,colSums)
(diag(1,5)[,rep(1:5,3)])
tt
apply(ttt,1,colSums)
ybt1=t(apply(ttt,1,colSums))
dim(ybt)
dim(ybt1)
ybt1=t(apply(gammab,1,colSums))
dim(gammab)
ybt1=t(apply(array(gammab,dim=c(B,n,K)),1,colSums))
dim(ybt1)
sum(ybt-ybt1)
sum(abs(ybt-ybt1))
phi=t(ybt/(rep(1,B)%o%colSums(gammab)))
lscale=((colSums(ybt)/colSums(pi))%o%rep(1,B))
lambda=phi*lscale
phi.unsmoothed=NULL
phi.unsmoothed=phi
lambda.unsmoothed=lambda
lambda=smooth.lambda(lambda)
smash
smooth.lambda = function(lambda){
return(t(apply(lambda,1,smash.pois,cxx = FALSE)))
}
lambda=smooth.lambda(lambda)
smooth.lambda = function(lambda){
return(t(apply(lambda,1,smash.poiss,cxx = FALSE)))
}
lambda=smooth.lambda(lambda)
lambda[is.na(lambda)]=lambda.unsmoothed[is.na(lambda)]
phi=lambda/lscale
rm(list=ls())
source("../../src/cluster_seq_mix.R")
K=2
sample_size=100
region="2_55459038_55462989"
file = paste0("reads_100_", region, ".Robj")
load(file.path("../../data/gtex", file))
data_matrix = NULL
tissue_name = NULL
for(i in 1:8){
data_temp = reads[[i]][[2]]
sample_ind = sample(1:100, sample_size)
data_temp = data_temp[sample_ind, ]
data_matrix = rbind(data_matrix, data_temp)
tissue_name_temp = reads[[i]][[1]]
tissue_name_temp = gsub(" .*$", "", tissue_name_temp)
tissue_name = c(tissue_name, tissue_name_temp)
}
dim(data_matrix)
res = cluster.mix(data_matrix, smooth = TRUE, K = K, tol = 1e-4, maxit = 5000)
data_temp
data_temp[NULL,]
tt=0
tt[[1]][[2]]=0
tt[[1]]=0
tt[[1]][[2]]=NULL
tt[[1]]=list()
tt[[1]]
rm(tt)
tt[[1]]=list()
tt=list()
tt[[1]]=list()
tt[[1]][[2]]=NLL
tt[[1]][[2]]=NULL
tt[[1]][[2]]=rbind(tt[[1]][[2]],1:3)
tt[[1]][[2]]
tt[[1]][[2]]=NULL
tt[[1]][[2]]
temp=NLL
temp=NULL
rbind(temp,1:3)
setwd("~/projects/sequence_clustering")
source("src/analysis_gtex/get_counts_single.R")
region="chr1:93297593-93307481"
region_split = split_region(region)
region_split$chr = gsub("[^0-9]", "", region_split$chr)
source.with.encoding('D:/Grad School/projects/sequence_clustering/src/analysis_gtex/get_counts_single.R', encoding='UTF-8')
region_split = split_region(region)
library(multiseq)
region_split = split_region(region)
region_split$chr = gsub("[^0-9]", "", region_split$chr)
load("supplemental/gtex/runinfo_subset.Robj")
setwd("D:/Grad School/projects/sequence_clustering")
load("supplemental/gtex/runinfo_subset.Robj")
samples_subset = aggregate(Run_s ~ body_site_s, data = runinfo_subset, FUN = sample)
samples_subset[1, ][[1]]
samples_subset[1, ][[2]][[1]][1]
samples_subset[1, ][[2]][[1]]
dim(lambda)
gene_region = read.table("supplemental/gtex/gene_region.txt", stringsAsFactors = FALSE)
gene_region = unlist(gene_region, use.names = FALSE)
gene_region = gsub("\\:", "_", gene_region)
gene_region = gsub("\\-", "_", gene_region)
#check to see if there are any regions with 0 total reads
for(i in 1:length(gene_region)){
load(paste0("data/gtex/reads_100_", gene_region[i], ".Robj"))
check = 0
for(i in 1:8){
check = check + sum(rowSums(reads[[i]][[2]]) == 0)
}
print(check)
}
